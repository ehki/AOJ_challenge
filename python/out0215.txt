1 182
3 27
1 175
1 253
1 16
1 125
2 18
1 77
2 42
1 122
1 132
1 118
1 124
2 26
1 84
1 249
1 48
1 59
1 35
1 139
1 216
1 250
1 60
1 241
1 55
1 87
1 144
1 35
1 77
2 43
Timer unit: 1e-06 s

Total time: 18.0573 s
File: 0215_4.py
Function: main at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           def main():
     5         1         10.0     10.0      0.0      while(True):
     6        31      28796.0    928.9      0.2          W, H = map(int,input().split())
     7        31         55.0      1.8      0.0          if not W: break
     8        30        142.0      4.7      0.0          B = float('inf')
     9        30         37.0      1.2      0.0          Bi = -1
    10        30       5380.0    179.3      0.0          edges = []
    11        30       7463.0    248.8      0.0          nodes = [[] for _ in range(5)]
    12        30         53.0      1.8      0.0          idx = 0
    13      4781       5046.0      1.1      0.0          for i in range(H):
    14    646752     720561.0      1.1      4.0              for j,a in enumerate(input()):
    15    642001     655464.0      1.0      3.6                  if a == "S": edges.append([i,j,idx,5]); ssedge = [i,j,idx,5]; idx+=1
    16    641971     662301.0      1.0      3.7                  elif a == "G": edges.append([i,j,idx,6]); ggedge = [i,j,idx,6]; idx+=1
    17    641941     898614.0      1.4      5.0                  elif a != ".": edges.append([i,j,idx,int(a)-1]); nodes[int(a)-1].append([i,j,idx,int(a)-1]); idx+=1
    18       180        757.0      4.2      0.0          for z in range(5):
    19       150        230.0      1.5      0.0              edges[ssedge[2]][3] = z
    20       150      16131.0    107.5      0.1              dist = [[float('inf')]*idx for _ in range(6)]
    21       150       2612.0     17.4      0.0              visited = [False] * idx
    22       150        217.0      1.4      0.0              dist[1][ssedge[2]] = 0
    23       150      52086.0    347.2      0.3              que = [(0,1,ssedge[2],0)]
    24       150        213.0      1.4      0.0              reached = False
    25      2689       3242.0      1.2      0.0              while que:
    26                                                           # print(que)
    27      2689      10868.0      4.0      0.1                  ccc,num,idd,hc = heappop(que)
    28      2689       7093.0      2.6      0.0                  ccc = int(ccc)-int(hc)
    29      2689       3256.0      1.2      0.0                  if num == 5:
    30       150        159.0      1.1      0.0                      reached = True
    31       150        300.0      2.0      0.0                      ccc += abs(edges[idd][0]-ggedge[0]) + abs(edges[idd][1]-ggedge[1])
    32       150        239.0      1.6      0.0                      break
    33      2539       4110.0      1.6      0.0                  nxt = (edges[idd][3]+1)%5
    34   1950603    2134453.0      1.1     11.8                  for n in nodes[nxt]:
    35   1948064    3416283.0      1.8     18.9                      cost = dist[num][idd] + abs(n[0]-edges[idd][0]) + abs(n[1]-edges[idd][1])
    36   1948064    3058129.0      1.6     16.9                      h = abs(n[0]-ggedge[0]) + abs(n[1]-ggedge[1])
    37   1948064    2181211.0      1.1     12.1                      h *= 0.99
    38   1948064    2512939.0      1.3     13.9                      if cost < dist[num+1][n[2]]:
    39    533027     646215.0      1.2      3.6                          dist[num+1][n[2]] = cost
    40    533027    1022039.0      1.9      5.7                          heappush(que,(cost+h,num+1,n[2],h))
    41       150        192.0      1.3      0.0              if reached and ccc < B:
    42        35         37.0      1.1      0.0                  B = ccc
    43        35         44.0      1.3      0.0                  Bi = z+1
    44        30         35.0      1.2      0.0          if Bi == -1:
    45                                                       print("NA")
    46                                                   else:
    47        30        317.0     10.6      0.0              print(Bi,B)

